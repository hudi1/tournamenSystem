SEQ=TOURNAMENT(OPT)=select auto_increment from information_schema.tables where table_name = 'tournament' and table_schema = 'tournamentsystem';
SEQ=PLAYER(OPT)=select auto_increment from information_schema.tables where table_name = 'player' and table_schema = 'tournamentsystem';
SEQ=PLAY_OFF_GAME(OPT)=select auto_increment from information_schema.tables where table_name = 'play_off_game' and table_schema = 'tournamentsystem';
SEQ=SEASON(OPT)=select auto_increment from information_schema.tables where table_name = 'season' and table_schema = 'tournamentsystem';
SEQ=PARTICIPANT(OPT)=select auto_increment from information_schema.tables where table_name = 'participant' and table_schema = 'tournamentsystem';
SEQ=WCH_TOURNAMENT(OPT)=select auto_increment from information_schema.tables where table_name = 'wch_tournament' and table_schema = 'tournamentsystem';
SEQ=GAME(OPT)=select auto_increment from information_schema.tables where table_name = 'game' and table_schema = 'tournamentsystem';
SEQ=GROUPS(OPT)=select auto_increment from information_schema.tables where table_name = 'groups' and table_schema = 'tournamentsystem';
SEQ=FINAL_STANDING(OPT)=select auto_increment from information_schema.tables where table_name = 'final_standing' and table_schema = 'tournamentsystem';
SEQ=WCH_QUALIFICATION(OPT)=select auto_increment from information_schema.tables where table_name = 'wch_qualification' and table_schema = 'tournamentsystem';
SEQ=USER(OPT)=select auto_increment from information_schema.tables where table_name = 'user' and table_schema = 'tournamentsystem';

INSERT_PLAYER(CRUD,inx=Player,outx=Player,tab=player)=
  insert into %%player (%ID, %NAME, %SURNAME, %CLUB, {? :playerDiscriminator | %PLAYER_DISCRIMINATOR,} %WORLD_RANKING, %USER_ID, %ITHF_ID)
  {= values (:id(seq=PLAYER), :name, :surname, :club, {? :playerDiscriminator | :playerDiscriminator,} :worldRanking, :user.id, :ithfId) }
;

INSERT_GROUPS(CRUD,inx=Groups,outx=Groups,tab=groups)=
  insert into %%groups (%ID, %NAME, %TOURNAMENT_ID {? :numberOfHockey | ,%NUMBER_OF_HOCKEY} {? :type | ,%TYPE} {? :indexOfFirstHockey | ,%INDEX_OF_FIRST_HOCKEY}  {? :copyResult | ,%COPY_RESULT } {? :playThirdPlace | ,%PLAY_THIRD_PLACE} {? :playOff | ,%PLAY_OFF} {? :playOffType | ,%PLAY_OFF_TYPE})
  {= values (:id(seq=GROUPS), :name, :tournament.id {? :numberOfHockey | ,:numberOfHockey} {? :type | ,:type} {? :indexOfFirstHockey | ,:indexOfFirstHockey} {? :copyResult | ,:copyResult} {? :playThirdPlace | ,:playThirdPlace} {? :playOff | ,:playOff} {? :playOffType | ,:playOffType}) }
;

INSERT_TOURNAMENT(CRUD,inx=Tournament,outx=Tournament,tab=tournament)=
  insert into %%tournament (%ID, %NAME, %SEASON_ID {? :finalPromoting | ,%FINAL_PROMOTING} {? :lowerPromoting | ,%LOWER_PROMOTING} {? :winPoints | ,%WIN_POINTS}
  	{? :playOffFinal | ,%PLAY_OFF_FINAL} {? :playOffLower | ,%PLAY_OFF_LOWER} {? :minPlayersInGroup | ,%MIN_PLAYERS_IN_GROUP} {? :sortType | ,%SORT_TYPE} {? :publish | ,%PUBLISH}
  )
  {= values (:id(seq=TOURNAMENT), :name, :season.id {? :finalPromoting | ,:finalPromoting} {? :lowerPromoting | ,:lowerPromoting} {? :winPoints| ,:winPoints} {? :playOffFinal | ,:playOffFinal} {? :playOffLower | ,:playOffLower} 
  	{? :minPlayersInGroup | ,:minPlayersInGroup } {? :sortType | ,:sortType } {? :publish | ,:publish } 
  ) }
;

UPDATE_TOURNAMENT(CRUD,inx=Tournament,outx=Tournament,tab=tournament)=
  update %%TOURNAMENT
  {= set
    { ,%NAME = :name(call=isDef) }
    { ,%SEASON_ID = :season.id(call=isDef) }
    { ,%FINAL_PROMOTING = :finalPromoting(call=isDef) }
    { ,%LOWER_PROMOTING = :lowerPromoting(call=isDef) }
    { ,%WIN_POINTS = :winPoints(call=isDef) }
    { ,%PLAY_OFF_FINAL = :playOffFinal(call=isDef) }
    { ,%PLAY_OFF_LOWER = :playOffLower(call=isDef) }
    { ,%MIN_PLAYERS_IN_GROUP = :minPlayersInGroup(call=isDef) }
    { ,%SORT_TYPE = :sortType(call=isDef) }
    { ,%PUBLISH = :publish(call=isDef) }
  }
  {= where
    {& %ID = :id(!empty) }
  }
;

SELECT_PLAY_OFF_GAME(QRY,inx=PlayOffGame,outx=PlayOffGame,tab=playOffGame=p,tab=game=g,tab=groups=g1,tab=participant=p2,tab=participant=p1,tab=player=p4,tab=player=p5)=
  select %p.ID @id(id), %p.GROUP_ID @group.id(id), %p.POSITION @position
         , %p.HOME_PARTICIPANT_ID @homeParticipant.id(id), %p.AWAY_PARTICIPANT_ID @awayParticipant.id(id), %p.STATUS @status, %p.RESULT @result(type=result)
         {? :group(call=toInit) | , %g1.NAME @group.name, %g1.NUMBER_OF_HOCKEY @group.numberOfHockey, %g1.TYPE @group.type, %g1.INDEX_OF_FIRST_HOCKEY @group.indexOfFirstHockey, %g1.TOURNAMENT_ID @group.tournament.id, %g1.COPY_RESULT @group.copyResult, %g1.PLAY_THIRD_PLACE @group.playThirdPlace, %g1.PLAY_OFF @group.playOff, %g1.PLAY_OFF_TYPE @group.playOffType }
         {? :awayParticipant(call=toInit) | , %p2.POINTS @awayParticipant.points, %p2.RANK @awayParticipant.rank, %p2.GROUP_ID @awayParticipant.group.id(id), %p2.PLAYER_ID @awayParticipant.player.id, %p2.SCORE @awayParticipant.score(type=score), %p2.EQUAL_RANK @awayParticipant.equalRank, %p4.CLUB @homeParticipant.player.club, p4.NAME @homeParticipant.player.name, p4.SURNAME @homeParticipant.player.surname, p4.PLAYER_DISCRIMINATOR @homeParticipant.player.playerDiscriminator }
         {? :homeParticipant(call=toInit) | , %p1.POINTS @homeParticipant.points, %p1.RANK @homeParticipant.rank, %p1.GROUP_ID @homeParticipant.group.id(id), %p1.PLAYER_ID @homeParticipant.player.id, %p1.SCORE @homeParticipant.score(type=score), %p1.EQUAL_RANK @homeParticipant.equalRank, %p5.CLUB @awayParticipant.player.club, p5.NAME @awayParticipant.player.name, p5.SURNAME @awayParticipant.player.surname, p5.PLAYER_DISCRIMINATOR @awayParticipant.player.playerDiscriminator }
  from %%play_off_game p
  {? :group(call=toInit) | left join %%groups g1 on %p.GROUP_ID = %g1.ID }
  {? :homeParticipant(call=toInit) | left join %%participant p1 on %p.HOME_PARTICIPANT_ID = %p1.ID }
  {? :homeParticipant(call=toInit) | left join %%player p4 on %p1.PLAYER_ID = %p4.ID }
  {? :awayParticipant(call=toInit) | left join %%participant p2 on %p.AWAY_PARTICIPANT_ID = %p2.ID }
  {? :awayParticipant(call=toInit) | left join %%player p5 on %p2.PLAYER_ID = %p5.ID }
  {= where
    {& %p.ID = :id }
    {& %p.GROUP_ID = :group.id }
    {& %p.POSITION = :position }
    {& %p.HOME_PARTICIPANT_ID = :homeParticipant.id }
    {& %p.AWAY_PARTICIPANT_ID = :awayParticipant.id }
    {& UPPER(%p.STATUS) like :+status }
    {& %p.RESULT = :result(type=result) }
  }
  {#ID order by %p.ID }
  {#HOME_PARTICIPANT order by %p.HOME_PARTICIPANT_ID }
  {#AWAY_PARTICIPANT order by %p.AWAY_PARTICIPANT_ID }
  {#GROUP order by %p.GROUP_ID }
  {#POSITION order by %p.POSITION }
;

DELETE_FINAL_GROUPS(CRUD,inx=Tournament,outx=Groups,tab=groups)=
  delete from %%groups
  {= where
    {& UPPER(%TYPE) = 'F' }
    {& %TOURNAMENT_ID = :id(!empty) }
  }
;

UPDATE_OPPOSITE_GAME(CRUD,inx=Game,outx=Game,tab=game)=
  update %%game
  {= set
    { ,%RESULT = :result(type=result,call=isDef) }
  }
  {= where
    {& %HOME_PARTICIPANT_ID = :homeParticipant.id }
    {& %AWAY_PARTICIPANT_ID = :awayParticipant.id }  
   }
;

SELECT_PLAYER_GAME(QRY,in=StatisticForm,outx=Player,tab=player=p,tab=participant=p1,tab=user=u,tab=game=g1,tab=groups=g2,tab=tournament=t)=
  select %p.ID @id(id), %p.NAME @name, %p.SURNAME @surname, %p.CLUB @club, %p.PLAYER_DISCRIMINATOR @playerDiscriminator, %p.WORLD_RANKING @worldRanking, %p.USER_ID @user.id(id),
         %p1.ID @participants.id(id), %p1.POINTS @participants.points, %p1.RANK @participants.rank, %p1.GROUP_ID @participants.group.id, %p1.PLAYER_ID @participants.player.id, %p1.SCORE @participants.score(type=score), %p1.EQUAL_RANK @participants.equalRank,
         %g1.ID @participants.games.id(id), %g1.HOME_PARTICIPANT_ID @participants.games.homeParticipant.id, %g1.AWAY_PARTICIPANT_ID @participants.games.awayParticipant.id, %g1.STATUS @participants.games.status, %g1.RESULT @participants.games.result(type=result),
  	     %g2.NAME @participants.group.name, %g2.NUMBER_OF_HOCKEY @participants.group.numberOfHockey, %g2.TYPE @participants.group.type, %g2.INDEX_OF_FIRST_HOCKEY @participants.group.indexOfFirstHockey, %g2.TOURNAMENT_ID @participants.group.tournament.id, %g2.COPY_RESULT @participants.group.copyResult, %g2.PLAY_THIRD_PLACE @participants.group.playThirdPlace, %g2.PLAY_OFF @participants.group.playOff, %g2.PLAY_OFF_TYPE @participants.group.playOffType,
  	     %t.NAME @participants.group.tournament.name, %t.SEASON_ID @participants.group.tournament.season.id, %t.FINAL_PROMOTING @participants.group.tournament.finalPromoting, %t.LOWER_PROMOTING @participants.group.tournament.lowerPromoting, %t.WIN_POINTS @participants.group.tournament.winPoints, %t.PLAY_OFF_FINAL @participants.group.tournament.playOffFinal, %t.PLAY_OFF_LOWER @participants.group.tournament.playOffLower, %t.MIN_PLAYERS_IN_GROUP @participants.group.tournament.minPlayersInGroup, %t.SORT_TYPE @participants.group.tournament.sortType,
         %u.NAME @user.name, %u.SURNAME @user.surname, %u.EMAIL @user.email, %u.USER_NAME @user.userName, %u.PASSWORD @user.password, %u.ROLE @user.role, %u.PLATNOST @user.platnost
  from %%player p
  left join %%participant p1 on %p.ID = %p1.PLAYER_ID
  left join %%game g1 on %p1.ID = %g1.HOME_PARTICIPANT_ID
  left join %%groups g2 on %p1.GROUP_ID = %g2.ID
  left join %%tournament t on %g2.TOURNAMENT_ID = %t.ID
  left join %%user u on %p.USER_ID = %u.ID
  {= where
  	{& %u.ID = :user.id(notnull,id) }
    {& %t.ID = :tournament.id(notnull,id) }
    {& %t.SEASON_ID = :season.id(notnull,id) }
    {& %g2.ID = :group.id(notnull,id) }
    {& %p.ID = :player.id(notnull,id) }
  }
  
;

GET_PLAYER_NOT_IN_TOURNAMENT(QRY,inx=Tournament,outx=Player,tab=player=p,tab=participant=r,tab=participant=a_r,tab=groups=g)=
	select distinct %p.ID @id, %p.NAME @name, %p.SURNAME @surname, %p.CLUB @club, %p.PLAYER_DISCRIMINATOR @playerDiscriminator, %p.WORLD_RANKING @worldRanking, %p.USER_ID @user.id(id)
	from %%player p LEFT JOIN %%participant r on %p.ID = %r.PLAYER_ID 
	{= where p.id not in 
		(select %a_r.PLAYER_ID 
			from %%participant a_r left join %%groups g on %a_r.GROUP_ID = %g.ID
			where 
				%g.TOURNAMENT_ID = :id 
		)
		{& %p.USER_ID = :season.user.id }	
	} order by %p.SURNAME
;

GET_PARTICIPANT_IN_TOURNAMENT(QRY,inx=Tournament,outx=Participant,tab=player=p,tab=groups=g,tab=participant=r)=
    select distinct %r.ID @id, %r.POINTS @points, %r.RANK @rank, %r.GROUP_ID @group.id, %r.PLAYER_ID @player.id, %r.SCORE @score(type=score), %r.EQUAL_RANK @equalRank,
    	   %p.NAME @player.name, %p.SURNAME @player.surname, %p.CLUB @player.club, %p.PLAYER_DISCRIMINATOR @player.playerDiscriminator, %p.WORLD_RANKING @player.worldRanking, %p.ITHF_ID @player.ithfId,
    	   %g.NAME @group.name
	from %%participant r LEFT JOIN %%player p on %p.ID = %r.PLAYER_ID 
	                       LEFT JOIN %%groups g on %g.ID = %r.GROUP_ID
	{= where 
		{& %g.TOURNAMENT_ID = :id }
	    {& %g.TYPE = 'B' }
	    {& %p.USER_ID = :season.user.id}	 
	 }
;